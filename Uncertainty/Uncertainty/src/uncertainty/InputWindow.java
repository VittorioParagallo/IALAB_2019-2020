/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package uncertainty;

import aima.core.probability.Factor;
import aima.core.probability.RandomVariable;
import aima.core.probability.bayes.BayesianNetwork;
import aima.core.probability.bayes.Node;
import aima.core.probability.bayes.impl.FullCPTNode;
import aima.core.probability.domain.FiniteDomain;
import aima.core.probability.proposition.AssignmentProposition;
import java.awt.Component;
import java.io.File;
import java.io.FilenameFilter;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.util.Pair;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JTable;
import javax.swing.JComboBox;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
/**
 *
 * @author tommy
 */
public class InputWindow extends javax.swing.JFrame {
    
    private Inference inf;
    private final String DIRECTORY = "C:\\\\Users\\\\tommy\\\\Documents\\\\universita\\\\Magistrale\\\\IA_Lab\\\\Esercizi incertezza\\\\SamIam Nets\\\\";
    private BifBNReader bnReader;
    private BayesianNetwork bn;
    private JTable table;
    private DefaultComboBoxModel<Object> comboModel = new DefaultComboBoxModel<>();
    private JComboBox<Object> comboValues = new JComboBox<>(comboModel);;
    /**
     * Creates new form InputWindow
     */
    public InputWindow() {
        initComponents();
        inf = new Inference();
        fillNets();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        MPEButton = new javax.swing.JButton();
        MAPButton = new javax.swing.JButton();
        fileNames = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        loadNetButton = new javax.swing.JButton();
        variables = new javax.swing.JScrollPane();
        assignments = new javax.swing.JScrollPane();
        jLabel3 = new javax.swing.JLabel();
        result = new javax.swing.JLabel();
        executionTime = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Inference");

        MPEButton.setText("MPE");
        MPEButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MPEButtonActionPerformed(evt);
            }
        });

        MAPButton.setText("MAP");
        MAPButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MAPButtonActionPerformed(evt);
            }
        });

        fileNames.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        fileNames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileNamesActionPerformed(evt);
            }
        });

        jLabel2.setText("Nets");

        loadNetButton.setText("Load");
        loadNetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadNetButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Assignments");

        result.setText("Result:");

        executionTime.setText("Execution Time:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(153, 153, 153)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(fileNames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(44, 44, 44)
                                        .addComponent(loadNetButton))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(MPEButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 401, Short.MAX_VALUE)
                                        .addComponent(MAPButton))))
                            .addComponent(assignments)
                            .addComponent(variables)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(result)
                                    .addComponent(jLabel3)
                                    .addComponent(executionTime))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(100, 100, 100))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileNames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(loadNetButton))
                .addGap(18, 18, 18)
                .addComponent(variables, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(executionTime)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(result)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(assignments, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MPEButton)
                    .addComponent(MAPButton))
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //put files names in combo box
    private void fillNets(){
        File f = new File(DIRECTORY);
        
        File[] files = f.listFiles(new FilenameFilter() {				
                //apply a filter
                @Override
                public boolean accept(File dir, String name) {
                        boolean result;
                        if(name.endsWith(".bif")){
                                result=true;
                        }
                        else{
                                result=false;
                        }
                        return result;
                }
        });
        
        this.fileNames.removeAllItems();
        
        for(File file:files){
            this.fileNames.addItem(file.getName());
        }
    }
    
    //start MPE inference
    private void MPEButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MPEButtonActionPerformed
        // TODO add your handling code here:
        Object[][] data = getTableData();
        
        Map<RandomVariable, Object> assignment = new HashMap<RandomVariable, Object>(); 
        
        //se evindece Ã¨ true allora imposto alla variabile il valore nella combobox
        for(int i=0; i<data.length; i++){
            if((Boolean)data[i][2]==true){
                assignment.put((RandomVariable)data[i][0], data[i][1]);
            }
        }
        
        AssignmentProposition[] evidence = new AssignmentProposition[assignment.size()];
        
        int i=0;
        for(RandomVariable var:assignment.keySet()){
            evidence[i] = new AssignmentProposition(var,assignment.get(var));
            i++;
        }
        
        long start = System.currentTimeMillis(); 
        
        MPEAssignment ass = inf.MPE(evidence,bn);
        
        long time = System.currentTimeMillis() - start; 
        
        fillResult("MPE",ass,time);
    }//GEN-LAST:event_MPEButtonActionPerformed

    //load bayesian network use parser on file
    private void loadNetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadNetButtonActionPerformed
        // TODO add your handling code here:        
        String name = String.valueOf(this.fileNames.getSelectedItem());
        
        try {
            bnReader = new BifBNReader(DIRECTORY+name) {
                @Override
                protected Node nodeCreation(RandomVariable var, double[] probs, Node... parents) {
                    return new FullCPTNode(var, probs, parents);
                }
            };
        } catch (Exception ex) {
            Logger.getLogger(InputWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        bn = bnReader.getBayesianNetwork();
        
        fillVariables();
    }//GEN-LAST:event_loadNetButtonActionPerformed
    
    //fill table with variables of bayesian network
    private void fillVariables(){
        String[] columnNames = {"Variable",
                        "Value",
                        "Evidence",
                        "MAP"};
        Object[][] data = generateRows();
        
        DefaultTableModel model = new DefaultTableModel(data, columnNames);
                
        table = new JTable(model) {

            private static final long serialVersionUID = 1L;

            @Override
            public Class getColumnClass(int column) {
                switch (column) {
                    case 0:
                        return String.class;
                    case 1:
                        return Object.class;
                    case 2:
                        return Boolean.class;
                    case 3:
                        return Boolean.class;
                    default:
                        return Boolean.class;
                }
            }
        };
        
        //fill combo box with variable possible values
        TableColumn column = table.getColumnModel().getColumn(1);
        column.setCellEditor(new DefaultCellEditor(comboValues){
            @SuppressWarnings("unchecked")
            @Override
            public Component getTableCellEditorComponent(JTable table, Object value,
                    boolean isSelected, int row, int column) {
               
                Object[] items = new Object[]{};

                // get the value in the column to the left
                Object column0Value = table.getValueAt(row, column - 1);
                if (column0Value != null) {
                    // if the value is not null, then get the map's values
                    // and use it to fill our items array
                    items = varPossibleValues((RandomVariable)column0Value);
                } 

                // get the super component, the JComboBox that is being used
                // as an editor:
                JComboBox<Object> superCombo = (JComboBox<Object>) super.getTableCellEditorComponent(table, value, isSelected,
                        row, column);

                // create a model and fill with items
                DefaultComboBoxModel<Object> comboModel = new DefaultComboBoxModel<>(items);

                // set the cell editor's model and return
                superCombo.setModel(comboModel);
                return superCombo;
            }
        });
        
        variables.getViewport().add(table);
    }
    
    //set value of table rows
    private Object[][] generateRows(){
        List<RandomVariable> vars = bn.getVariablesInTopologicalOrder();
        Object[][] data = new Object[vars.size()][4];
        
        int i=0;
        for(RandomVariable var:vars){            
            data[i][0] = var;
            data[i][1] = null;
            data[i][2] = false;
            data[i][3] = false;    

            i++;
        }
        
        return data;
    }
        
    //extract possible values for a variable
    private Object[] varPossibleValues(RandomVariable var){                
        Set possibleValues = ((FiniteDomain)var.getDomain()).getPossibleValues();
        Object[] values = new Object[possibleValues.size()];
        
        int i=0;
        for(Object value:possibleValues){            
            values[i]=value;
            i++;
        }
        
        return values;
    }
    
    //get user input from table
    private Object[][] getTableData(){
        
        Object[][] data = new Object[table.getRowCount()][table.getColumnCount()];
        
        for(int row=0; row<table.getRowCount(); row++){
            for(int col=0; col<table.getColumnCount(); col++){                              
                data[row][col]=table.getValueAt(row, col);                
            }     
        }
        
        return data;
    }
    
    //take evidences set in table
    private AssignmentProposition[] extractEvidence(Object[][] data){
        Map<RandomVariable, Object> assignment = new HashMap<RandomVariable, Object>(); 
        
        //se evindece Ã¨ true allora imposto alla variabile il valore nella combobox
        for(int i=0; i<data.length; i++){
            if((Boolean)data[i][2]==true){
                assignment.put((RandomVariable)data[i][0], data[i][1]);
            }
        }
        
        AssignmentProposition[] evidence = new AssignmentProposition[assignment.size()];
        
        int i=0;
        for(RandomVariable var:assignment.keySet()){
            evidence[i] = new AssignmentProposition(var,assignment.get(var));
            i++;
        }
        
        return evidence;
    }
    
    //take map variables set in table
    private Set<RandomVariable> extractMAP(Object[][] data){
        Set<RandomVariable> map = new HashSet<RandomVariable>();
        
        for(int i=0; i<data.length; i++){
            if((Boolean)data[i][3]==true){
                map.add((RandomVariable)data[i][0]);
            }
        }
        
        return map;
    }
    
    //execute MAP inference
    private void MAPButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MAPButtonActionPerformed
        // TODO add your handling code here:
        Object[][] data = getTableData();
                
        AssignmentProposition[] evidence = extractEvidence(data);                
        
        Set<RandomVariable> map = extractMAP(data);
        
        long start = System.currentTimeMillis();        
        
        MPEAssignment assignment = inf.MAP(map, evidence, bn);
        
        long time = System.currentTimeMillis() - start;
        
        fillResult("MAP", assignment, time);
    }//GEN-LAST:event_MAPButtonActionPerformed
    
    //show result of the inference
    private void fillResult(String op, MPEAssignment assignment, long time){
        
        Factor prob = assignment.probability;
        double norm = assignment.norm;
        
        this.result.setText("Result: P("+op+",e) = "+new DecimalFormat("#.##############").format(prob.getValues()[0])+
                            "     P("+op+"|e) = "+new DecimalFormat("#.##############").format(prob.getValues()[0]/norm));
        
        printTime(time);        
        
        Object[][] data = new Object[assignment.assignments.size()][2];
        
        int i=0;
        for(Pair<RandomVariable, Object> p:assignment.assignments){
            data[i][0] = p.getKey();
            data[i][1] = p.getValue();
            i++;
        }
        
        DefaultTableModel model = new DefaultTableModel(data, new String[]{"Variable", "Value"}); 
        JTable table = new JTable(model);
        this.assignments.getViewport().add(table);
    }
    
    private void printTime(long time){
        String timeString = new String();
        
        if(TimeUnit.MILLISECONDS.toSeconds(time) > 0){
            timeString+=TimeUnit.MILLISECONDS.toSeconds(time)+" sec";
        } else {
            timeString+=time+" ms";
        }
        
        this.executionTime.setText("Execution Time: "+timeString);
    }    
    
    private void fileNamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileNamesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileNamesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InputWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InputWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InputWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InputWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InputWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton MAPButton;
    private javax.swing.JButton MPEButton;
    private javax.swing.JScrollPane assignments;
    private javax.swing.JLabel executionTime;
    private javax.swing.JComboBox<String> fileNames;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton loadNetButton;
    private javax.swing.JLabel result;
    private javax.swing.JScrollPane variables;
    // End of variables declaration//GEN-END:variables
}
